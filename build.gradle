import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id("com.github.johnrengelman.shadow") version ("7.1.2")
}

group = 'me.eradiator'
version = '22.12'

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'andrei1058'
        url = 'https://repo.andrei1058.dev/releases/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven { url 'https://jitpack.io' }
}
shadowJar {
    archiveName("Additions-"+project.version+".jar")
    relocate("com.cryptomorin.xseries", "me.eradiator.bedwars.additions.libs.xseries")
    exclude("com/cryptomorin/xseries/XTag*")
    exclude("com/cryptomorin/xseries/XSound*")
    exclude("com/cryptomorin/xseries/XBlock*")
    exclude("com/cryptomorin/xseries/particles/")
    exclude("com/cryptomorin/xseries/messages/")
    exclude("com/cryptomorin/xseries/XPotion*")
    exclude("com/cryptomorin/xseries/XItemStack*")
    exclude("com/cryptomorin/xseries/XEntity*")
    exclude("com/cryptomorin/xseries/ReflectionUtils*")
    exclude("com/cryptomorin/xseries/NMSExtras*")
    exclude("com/cryptomorin/xseries/XEnchantment*")
    exclude("com/cryptomorin/xseries/NoteBlockMusic*")
    exclude("com/cryptomorin/xseries/XBiome*")
}
build.dependsOn shadowJar

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.13.2-R0.1-SNAPSHOT'
    compileOnly(files("libs/BedWars1058.jar"))
    compileOnly 'com.andrei1058.bedwars:bedwars-api:22.7'
    implementation 'com.github.cryptomorin:XSeries:9.1.0'
    compileOnly(files("libs/PlaceholderAPI-2.11.2.jar"))
}

def targetJavaVersion = 11
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = 11
    targetCompatibility = 11
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('PAPI.java'){
        expand props
    }
    filesMatching('plugin.yml') {
        expand props
    }
}
